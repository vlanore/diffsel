#!/usr/bin/python3.5

from functools import reduce
from diffsel_script_utils import *

#===================================================================================================
print(step("Parsing command line arguments"))

from argparse import ArgumentParser, FileType
parser = ArgumentParser(description='A small script that takes a coevol trace file and displays a distribution plot for one or more columns.')
parser.add_argument('-c', '--columns', metavar="col", nargs='+', help='the columns to plot')
parser.add_argument('-i', '--inputFile', metavar="input", type=FileType('r'), nargs='+', help='the trace files')
parser.add_argument('-b', '--burnin', type=float, default=20, help="the burn-in percentage (a float between 0 and 100); default is 20")
parser.add_argument('-n', '--nbin', type=int, default=30, help="the number of bins in the plotted histogram; default is 30")
parser.add_argument('-m', '--max', type=int, default=-1, help="the maximum iterations that should be included in the computation; iterations past this number will be ignored")
parser.add_argument('-d', '--dontnormalize', dest="normalize", action='store_true', help="set this flag not to normalize distributions (default is to normalize)")

args = parser.parse_args()

traceFiles = args.inputFile
print("-- Trace files are "+", ".join([param(f.name) for f in args.inputFile]))
burnin = args.burnin
print("-- Burn-in is "+param(burnin)+param("%"))
cols = args.columns
print("-- Columns to plot are "+", ".join([param(c) for c in cols]))
nbin = args.nbin
print("-- Number of histogram bins is "+param(nbin))
normalize = not args.normalize
print("-- Normalization is "+param(normalize))
imax = args.max
if imax != -1:
    print("-- Maximum iterations is "+param(imax))
else:
    print("-- No maximum iteration specified; full trace will be used")


#===================================================================================================
print(step("Starting trace analysis!"))

categories = [[strip(cat) for cat in f.readline().split('\t')] for f in traceFiles]
filedata = [[l for l in tf] for tf in traceFiles]
colsdata = {}
for col in cols:
    pos = []
    if all([col in cat for cat in categories]):
        pos = [c.index(col) for c in categories]
        print("-- Column "+param(col)+" exists in traces at positions "+", ".join([data(p) for p in pos])+" respectively")
    else:
        print(failure("column "+param(col)+" does not exist in all traces!"))
        print("\tColumns that exist in all traces are: "+", ".join([data(s) for s in reduce(set.intersection, [set(c) for c in categories])]))
        exit(1)

    if imax == -1:
        print("-- Extracting column data")
        colsdata[col] = [[float(l.split('\t')[pos[i]]) for l in filedata[i]] for i in range(len(filedata))]
        # colsdata[col] = [[float(l.split('\t')[pos[i]]) for l in traceFiles[i]] for i in range(len(traceFiles))]
    else:
        print("-- Extracting first "+param(imax)+" lines of data")
        colsdata[col] = [[float(traceFiles[i].readline().split('\t')[pos[i]]) for j in range(imax)] for i in range(len(traceFiles))]

    burnins = [int(len(c)*float(burnin)/100.0) for c in colsdata[col]]
    print("-- Burn-in ends at point "+", ".join([data(b) for b in burnins])+" respectively")

    print("-- Applying burn-in")
    colsdata[col] = [colsdata[col][i][burnins[i]:] for i in range(len(colsdata[col]))]

    print("-- Traces contain "+", ".join([data(len(c)) for c in colsdata[col]])+" lines respectively")

#===================================================================================================
print(step("Plotting data!"))

import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=1, ncols=len(cols))
fig.set_size_inches(6*len(cols), 6, forward=True)
for i in range(len(cols)):
    axe = axes[i] if len(cols) > 1 else axes
    axe.hist(colsdata[cols[i]], nbin, label=[f.name for f in args.inputFile], normed = normalize)
    axe.set_title("Distribution of "+cols[i])
    axe.legend()
plt.tight_layout()
plt.show()
