#!/usr/bin/python3.5

import sys
from functools import reduce

def strip(str):
    if str[0]=='#':
        return str[1:]
    elif str[-1:]=='\n':
        return str[:-1]
    else:
        return str

if sys.stdout.isatty():
    class bcolors:
        HEADER = '\033[95m'
        OKBLUE = '\033[34m'
        OKGREEN = '\033[32m'
        WARNING = '\033[93m'
        CYAN = '\033[96m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'
else:
    class bcolors:
        HEADER = ''
        OKBLUE = ''
        OKGREEN = ''
        WARNING = ''
        CYAN = ''
        FAIL = ''
        ENDC = ''
        BOLD = ''
        UNDERLINE = ''


def error(string):
    return bcolors.FAIL+bcolors.BOLD+string+bcolors.ENDC

def param(myparam):
    return bcolors.OKBLUE+str(myparam)+bcolors.ENDC

def data(myparam):
    return bcolors.OKGREEN+str(myparam)+bcolors.ENDC

def step(string):
    return bcolors.BOLD+bcolors.HEADER+string+bcolors.ENDC

#===================================================================================================
print(step("Parsing command line arguments"))

from argparse import ArgumentParser, FileType
parser = ArgumentParser(description='A small script that takes a coevol trace file and displays a distribution plot for one column.')
parser.add_argument('column', metavar="col", nargs=1, help='the column to plot')
parser.add_argument('inputFile', metavar="input", type=FileType('r'), nargs='+', help='the trace file')
parser.add_argument('-b', '--burnin', type=float, default=20, help="the burn-in percentage (a float between 0 and 100); default is 20")
parser.add_argument('-n', '--nbin', type=int, default=30, help="the number of bins in the plotted histogram; default is 50")
parser.add_argument('-m', '--max', type=int, default=-1, help="the maximum iterations that should be included in the computation; iterations past this number will be ignored")
args = parser.parse_args()

traceFiles = args.inputFile
print("-- Trace files are "+", ".join([param(f.name) for f in args.inputFile]))

burnin = args.burnin
print("-- Burn-in is "+param(burnin)+param("%"))

col = args.column[0]
print("-- Column to plot is "+param(col))

nbin = args.nbin
print("-- Number of histogram bins is "+param(nbin))

imax = args.max
if imax != -1:
    print("-- Maximum iterations is "+param(imax))
else:
    print("-- No maximum iteration specified; full trace will be used")


#===================================================================================================
print(step("Starting trace analysis!"))

categories = [[strip(cat) for cat in f.readline().split('\t')] for f in traceFiles]
pos = []
if all([col in cat for cat in categories]):
    pos = [c.index(col) for c in categories]
    print("-- Column exists in traces at positions "+", ".join([data(p) for p in pos])+" respectively")
else:
    print("-- "+error("Error")+": column "+param(col)+" does not exist in all traces!")
    print("\tColumns that exist in all traces are: "+", ".join([data(s) for s in reduce(set.intersection, [set(c) for c in categories])]))
    exit(1)

if imax == -1:
    print("-- Extracting column data")
    coldata = [[float(l.split('\t')[pos[i]]) for l in traceFiles[i]] for i in range(len(traceFiles))]
else:
    print("-- Extracting first "+param(imax)+" lines of data")
    coldata = [[float(traceFiles[i].readline().split('\t')[pos[i]]) for j in range(imax)] for i in range(len(traceFiles))]

burnins = [int(len(c)*float(burnin)/100.0) for c in coldata]
print("-- Burn-in ends at point "+", ".join([data(b) for b in burnins])+" respectively")

print("-- Applying burn-in")
coldata = [coldata[i][burnins[i]:] for i in range(len(coldata))]

print("-- Traces contain "+", ".join([data(len(c)) for c in coldata])+" lines respectively")

#===================================================================================================
print(step("Plotting data!"))

import matplotlib.pyplot as plt
plt.hist(coldata, nbin, label=[f.name for f in args.inputFile])
plt.title("Distribution of "+col)
plt.tight_layout()
plt.legend()
plt.show()
